<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.ddit.startup.show.mapper.ShowDesignMapper">

	<resultMap id="showPostWithHashtags" type="kr.or.ddit.startup.show.vo.SuShowPostVO">
	    <id property="postId" column="POST_ID" />
	    <result property="userId" column="USER_ID" />
	    <result property="designId" column="DESIGN_ID" />
	    <result property="title" column="TITLE" />
	    <result property="content" column="CONTENT" />
	    <result property="viewCount" column="VIEW_COUNT" />
	    <result property="likeCount" column="LIKE_COUNT" />
	    <result property="isDeleted" column="IS_DELETED" />
	    <result property="createdAt" column="CREATED_AT" />
	    <result property="updatedAt" column="UPDATED_AT" />
	    <result property="fileGroupNo" column="FILE_GROUP_NO" />
	    <result property="hashtags" column="HASHTAGS" />
	    <result property="thumbnailPath" column="thumbnailPath" />	
	</resultMap>
	
	<resultMap id="showPostDetailMap" type="kr.or.ddit.startup.show.vo.SuShowPostVO" extends="showPostWithHashtags">
	    <collection property="fileDetailList" ofType="kr.or.ddit.common.file.vo.FileDetailVO">
	        <result property="fileSaveLocate" column="FILE_PATH"/>
	        <result property="fileSn" column="FILE_SN"/>
	        <result property="fileRole" column="FILE_ROLE"/>
	    </collection>
	</resultMap>
	
	<resultMap id="SuShowCommentMap" type="kr.or.ddit.startup.show.vo.SuShowCommentVO">
        <id property="commentId" column="COMMENT_ID" />
        <result property="postId" column="POST_ID" />
        <result property="userId" column="USER_ID" />
        <result property="content" column="CONTENT" />
        <result property="createdAt" column="CREATED_AT" />
        <result property="updatedAt" column="UPDATED_AT" />
        <result property="parentId" column="PARENT_ID" />
        <result property="depth" column="DEPTH" />
        <result property="isDeleted" column="IS_DELETED" />
        <result property="rootId" column="rootId" />
    </resultMap>
      	
	<!-- 게시글 list 조회 -->
	<select id="selectShowPostList" parameterType="Map" resultMap="showPostWithHashtags">
	    SELECT
	        B.*
	    FROM (
	        SELECT
	            A.*, ROWNUM AS RNUM
	        FROM (
	            SELECT
	                SP.POST_ID,
	                SP.USER_ID,
	                SP.DESIGN_ID,
	                SP.TITLE,
	                SP.CONTENT,
	                SP.VIEW_COUNT,
	                SP.LIKE_COUNT,
	                SP.IS_DELETED,
	                SP.CREATED_AT,
	                SP.UPDATED_AT,
	                SP.FILE_GROUP_NO,
	                SP.HASHTAGS,
	                F.FILE_SAVE_LOCATE AS thumbnailPath
	            FROM
	                SU_SHOW_POST SP
	                LEFT JOIN (
	                    SELECT
	                        FILE_GROUP_NO,
	                        FILE_SAVE_LOCATE,
	                        ROW_NUMBER() OVER(PARTITION BY FILE_GROUP_NO ORDER BY FILE_SN ASC) as RN
	                    FROM FILE_DETAIL
	                ) F ON F.FILE_GROUP_NO = SP.FILE_GROUP_NO AND F.RN = 1
	            <where>
	                SP.IS_DELETED = 'N'
	                <include refid="searchCondition"/>
	            </where>
	            ORDER BY
	                SP.POST_ID DESC
	        ) A
	        WHERE ROWNUM &lt;= #{endRow}
	    ) B
	    WHERE 
	        B.RNUM &gt;= #{startRow}
	</select>
	
	<!-- 베스트 게시물 3개: 이달 작성글 중 LIKE_COUNT 상위 3 -->
	<select id="selectBestPostsOfMonth" parameterType="map" resultMap="showPostWithHashtags">
		  SELECT *
		  FROM (
		    SELECT
		      SP.POST_ID,
		      SP.TITLE,
		      SP.USER_ID,
		      SP.VIEW_COUNT,
		      SP.LIKE_COUNT,
		      SP.HASHTAGS,
		      F.FILE_SAVE_LOCATE AS thumbnailPath,
		      SP.LIKE_COUNT AS monthly_like_count
		    FROM SU_SHOW_POST SP
		    LEFT JOIN (
		      SELECT
		        FILE_GROUP_NO,
		        FILE_SAVE_LOCATE,
		        ROW_NUMBER() OVER (PARTITION BY FILE_GROUP_NO ORDER BY FILE_SN) AS RN
		      FROM FILE_DETAIL
		    ) F
		      ON F.FILE_GROUP_NO = SP.FILE_GROUP_NO
		     AND F.RN = 1
		    WHERE SP.IS_DELETED = 'N'
		      AND SP.CREATED_AT >= TRUNC(SYSDATE, 'MM')
		      AND SP.CREATED_AT &lt;  ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 1) 
		    ORDER BY SP.LIKE_COUNT DESC, SP.CREATED_AT DESC
		  )
		  WHERE ROWNUM &lt;= 3
	</select>

	<!-- 게시글이 몇 건인지 -->
	<select id="selectTotalCount" parameterType="map" resultType="int">
	    SELECT
	        COUNT(POST_ID)
	    FROM
	        SU_SHOW_POST
	    <where>
	        IS_DELETED = 'N'
	        <include refid="searchCondition"/>
	    </where>
	</select>
	
	<!-- 자랑게시판 상세보기 -->
	<select id="selectShowPostDetail" parameterType="String" resultMap="showPostDetailMap">
	    SELECT
	        SP.POST_ID
	        ,SP.USER_ID
	        ,SP.DESIGN_ID
	        ,SP.TITLE
	        ,SP.CONTENT
	        ,SP.VIEW_COUNT
	        ,SP.LIKE_COUNT
	        ,SP.IS_DELETED
	        ,SP.CREATED_AT
	        ,SP.UPDATED_AT
	        ,SP.FILE_GROUP_NO
	        ,SP.HASHTAGS
	        ,F.FILE_SAVE_LOCATE AS FILE_PATH
	        ,F.FILE_ROLE
	        ,F.FILE_SN  FROM
	        SU_SHOW_POST SP
	        LEFT JOIN USERS U ON U.USER_ID = SP.USER_ID
	        LEFT JOIN SU_SHOW_DESIGN SD ON SD.DESIGN_ID = SP.DESIGN_ID
	        LEFT JOIN FILE_DETAIL F ON F.FILE_GROUP_NO = SP.FILE_GROUP_NO
	    WHERE
	        SP.IS_DELETED = 'N'
	        AND SP.POST_ID = #{postId}
	</select>
	
	<!-- 검색하기 -->
	<sql id="searchCondition">
	    <if test="keyword != null and keyword != ''">
	        <choose>
	            <when test="searchType == 'title_content'">
	                AND (TITLE LIKE '%' || #{keyword} || '%' OR CONTENT LIKE '%' || #{keyword} || '%')
	            </when>
	            <when test="searchType == 'title'">
	                AND TITLE LIKE '%' || #{keyword} || '%'
	            </when>
	            <when test="searchType == 'content'">
	                AND CONTENT LIKE '%' || #{keyword} || '%'
	            </when>
	            <when test="searchType == 'hashtag'">
	                AND HASHTAGS LIKE '%' || #{keyword} || '%'
	            </when>
	        </choose>
	    </if>
	</sql>

	<!-- 자랑게시판 게시글 등록 -->
    <insert id="insertShowPost" parameterType="kr.or.ddit.startup.show.vo.SuShowPostVO">
        <selectKey keyProperty="postId" resultType="int" order="BEFORE">
            SELECT SEQ_SU_SHOW_POST_ID.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO SU_SHOW_POST (
            POST_ID
            ,USER_ID
            ,DESIGN_ID
            ,TITLE
            ,CONTENT
            ,VIEW_COUNT
            ,LIKE_COUNT
            ,IS_DELETED
            ,CREATED_AT
            ,UPDATED_AT
            ,FILE_GROUP_NO
            ,HASHTAGS
        ) VALUES (
            #{postId}
            ,#{userId}
            ,#{designId}
            ,#{title}
            ,#{content}
            ,0
            ,0
            ,'N'
            ,SYSDATE
            ,SYSDATE
            ,#{fileGroupNo}
            ,#{hashtags}
        )
    </insert>
    

    <!-- 게시글 삭제 -->
    <update id="deletePost" parameterType="map">
	    UPDATE SU_SHOW_POST
	    SET
	        IS_DELETED = 'Y'
	    WHERE
	        POST_ID = #{postId}
	        AND USER_ID = #{userId}
	</update>
	
	<!-- 게시글 수정 -->
	<update id="updatePost" parameterType="kr.or.ddit.startup.show.vo.SuShowPostVO">
	    UPDATE SU_SHOW_POST
	    SET
	        TITLE = #{title},
	        CONTENT = #{content},
	        HASHTAGS = #{hashtags},
	        FILE_GROUP_NO = #{fileGroupNo},
	        UPDATED_AT = SYSDATE
	    WHERE
	        POST_ID = #{postId}
	        AND USER_ID = #{userId}
	</update>
	
	<!-- 삭제할 파일 목록 받아 처리 -->
	<delete id="deleteFilesBySn" parameterType="list">
	    DELETE FROM FILE_DETAIL
	    WHERE FILE_SN IN
	    <foreach item="fileSn" collection="list" open="(" separator="," close=")">
	        #{fileSn}
	    </foreach>
	</delete>
		        
    <!-- 해시태그 (작성자가 직접 입력-> 없으면 만들어지고, 있으면 패스)-->
	<insert id="insertHashtags" parameterType="map">
	    MERGE INTO CODE_DETAIL T
	    USING (
	        <foreach collection="hashtagList" item="tag" separator=" UNION ALL ">
	            SELECT #{tag} AS H_TAG FROM DUAL
	        </foreach>
	    ) S 
	    ON (T.CODE_NAME = S.H_TAG AND T.CODE_GROUP_ID = 'SHOWDSTAG') <!-- CODE_NAME = S.H_TAG / CODE_GROUP_ID = 'SHOWDFTAG' -->
	    WHEN NOT MATCHED THEN
	        INSERT (T.CODE_ID, T.CODE_GROUP_ID, T.CODE_NAME, T.USE_YN)
	        VALUES (
	        	<!-- 일치하는 데이터가 없을시, sh_design_시퀀스 사용 -->
	            'sh_design_' || LPAD(SEQ_CODE_DETAIL.NEXTVAL, 5, '0'),
	            'SHOWDSTAG',
	            S.H_TAG,
	            'Y'
	        )
	</insert>
        
    <!-- 특정 사용자의 디자인 목록 조회 -->
    <select id="getDesignsByUserId" parameterType="String" resultType="kr.or.ddit.startup.design.vo.SuShowDesignVO">
        SELECT
            DESIGN_ID
            ,USER_ID
            ,DESIGN_NAME
            ,CREATED_AT
        FROM
            SU_SHOW_DESIGN
        WHERE
            USER_ID = #{userId}
            AND IS_DELETED = 'N'
        ORDER BY
            CREATED_AT DESC
    </select>
    
    <!-- 조회수 증가 -->
    <update id="incrementViewCount" parameterType="String"> 
        UPDATE SU_SHOW_POST 
        SET VIEW_COUNT = VIEW_COUNT + 1 
        WHERE POST_ID = #{postId} 
    </update> 
    
<!-- =========== 좋아요 관련 처음 ============ -->
    
    <!-- 사용자가 특정 게시물에 좋아요를 눌렀는지 확인 -->
    <select id="checkLikeExists" resultType="int">
        SELECT COUNT(*)
        FROM SU_SHOW_POST_LIKE
        WHERE POST_ID = #{postId} AND USER_ID = #{userId}
    </select>
	
	<!-- 좋아요 기록 추가 -->
    <insert id="insertLike">
        INSERT INTO SU_SHOW_POST_LIKE (LIKE_ID, POST_ID, USER_ID, LIKED_AT)
        VALUES (SYS_GUID(), #{postId}, #{userId}, SYSDATE)
    </insert>
	
	<!-- 좋아요 기록 삭제 -->
    <delete id="deleteLike">
        DELETE FROM SU_SHOW_POST_LIKE
        WHERE POST_ID = #{postId} AND USER_ID = #{userId}
    </delete>
	
	<!-- 게시물의 현재 좋아요 수 조회 -->
    <select id="selectLikeCount" parameterType="String" resultType="int">
        SELECT LIKE_COUNT
        FROM SU_SHOW_POST
        WHERE POST_ID = #{postId}
    </select>
    
    <update id="incrementLikeCount" parameterType="String">
        UPDATE SU_SHOW_POST
        SET LIKE_COUNT = LIKE_COUNT + 1
        WHERE POST_ID = #{postId}
    </update>

    <update id="decrementLikeCount" parameterType="String">
        UPDATE SU_SHOW_POST
        SET LIKE_COUNT = LIKE_COUNT - 1
        WHERE POST_ID = #{postId}
          AND LIKE_COUNT > 0 
    </update>
<!-- ========= 좋아요 관련 끝 ========= -->
    
<!-- ========= 댓글 관련 ============ -->
    
    <!-- 댓글목록 조회 -->
	<select id="selectCommentList" parameterType="String" resultMap="SuShowCommentMap">
	    SELECT
	        COMMENT_ID
	        ,POST_ID
	        ,USER_ID
	        ,CONTENT
	        ,CREATED_AT
	        ,UPDATED_AT
	        ,PARENT_ID
	        ,DEPTH
	        ,IS_DELETED
	        ,CONNECT_BY_ROOT COMMENT_ID AS rootId FROM 
	        SU_SHOW_COMMENT
	    WHERE
	        POST_ID = #{postId}
	        AND IS_DELETED = 'N'
	    START WITH PARENT_ID IS NULL
	    CONNECT BY PRIOR COMMENT_ID = PARENT_ID
	    ORDER SIBLINGS BY CREATED_AT ASC, COMMENT_ID ASC
	</select>
    
    <!-- 부모 댓글의 depth를 조회 -->
	    <select id="selectCommentDepth" parameterType="int" resultType="int">
	        SELECT
	            DEPTH
	        FROM
	            SU_SHOW_COMMENT
	        WHERE
	            COMMENT_ID = #{parentId}
	    </select>
    
    <!-- 댓글 등록 -->
    <insert id="insertComment" parameterType="kr.or.ddit.startup.show.vo.SuShowCommentVO">
        <selectKey keyProperty="commentId" resultType="int" order="BEFORE">
            SELECT SEQ_SU_SHOW_COMMENT_ID.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO SU_SHOW_COMMENT (
            COMMENT_ID
            ,POST_ID
            ,USER_ID
            ,CONTENT
            ,CREATED_AT
            ,UPDATED_AT
            ,PARENT_ID
            ,DEPTH
            ,IS_DELETED
        ) VALUES (
            #{commentId}
            ,#{postId}
            ,#{userId}
            ,#{content}
            ,SYSDATE
            ,SYSDATE
            ,#{parentId}
            ,#{depth}
    		,'N'
        )
    </insert>
    
    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="kr.or.ddit.startup.show.vo.SuShowCommentVO">
        UPDATE SU_SHOW_COMMENT
        SET
            CONTENT = #{content},
            UPDATED_AT = SYSDATE
        WHERE
            COMMENT_ID = #{commentId}
            AND USER_ID = #{userId}  AND IS_DELETED = 'N'
    </update>
	
	<!-- 댓글 삭제(논리적 삭제) -->
    <update id="deleteComment" parameterType="Map">
        UPDATE SU_SHOW_COMMENT
        SET
            IS_DELETED = 'Y',
            UPDATED_AT = SYSDATE
        WHERE
            COMMENT_ID = #{commentId}
            AND USER_ID = #{userId}  
    </update>
    
    <!-- 알림 로직을 위해 댓글을 작성한 아이디 찾기 -->
        <select id="selectCommentById" parameterType="int" resultMap="SuShowCommentMap">
        SELECT
            COMMENT_ID
            ,POST_ID
            ,USER_ID
            ,CONTENT
            ,CREATED_AT
            ,UPDATED_AT
            ,PARENT_ID
            ,DEPTH
            ,IS_DELETED
        FROM
            SU_SHOW_COMMENT
        WHERE
            COMMENT_ID = #{commentId}
    </select>
     
</mapper>